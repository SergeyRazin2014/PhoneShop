/* как я понял редюсре получает все телефоны вообще */


import * as R from 'ramda'; //ИСПОЛЬЗУЕМ НОВУЮ БИБЛИОТЕКУ ramda - У НЕЕ ВСЕ МЕТОДЫ ИММУТАБЕЛЬНЫ

import { FETCH_PHONES_SUCCESS, LOAD_MORE_PHONES_SUCCESS, FETCH_PHONE_BY_ID_SUCCESS } from 'actionTypes';

const initialState = {};

export default (state = initialState, action) => {

    const { type, payload } = action;

    switch (type) {
        case FETCH_PHONES_SUCCESS:
            const newValues = R.indexBy(R.prop('id'), payload); //преобразуем наши объекты телефоны в объекты с индексами, где индексы будут id телефонов
            return R.merge(state, newValues); //мержим новый стейт со старым, при этом получаем новый объект, т.е. в ramda - все методы иммутабельны (возвращают новый объект)

        case LOAD_MORE_PHONES_SUCCESS: //загрузить еще телефоны (пейджинг)
            const moreValues = R.indexBy(R.prop('id'), payload); //преобразуем наши объекты телефоны в объекты с индексами, где индексы будут id телефонов
            return R.merge(state, moreValues); //мержим новый стейт со старым, при этом получаем новый объект, т.е. в ramda - все методы иммутабельны (возвращают новый объект)

            case FETCH_PHONE_BY_ID_SUCCESS:
                return R.assoc(payload.id, payload, state); //создает новый стейт и обновляется там объект с id = payload.id (не до конца понял зачем автор курса эту хрень юзает)
        default:
            return state;
    }
}