import {
    FETCH_PHONES_START,
    FETCH_PHONES_SUCCESS,
    FETCH_PHONES_FAILURE,
    LOAD_MORE_PHONES_START,
    LOAD_MORE_PHONES_SUCCESS,
    LOAD_MORE_PHONES_FAILURE,
    FETCH_PHONE_BY_ID_START,
    FETCH_PHONE_BY_ID_SUCCESS,
    FETCH_PHONE_BY_ID_FAILURE,
    ADD_PHONE_TO_BASKET,
    SEARCH_PHONE,
    FETCH_CATEGORIES_START,
    FETCH_CATEGORIES_SUCCESS,
    FETCH_CATEGORIES_FAILURE,
    REMOVE_PHONE_FROM_BASKET
} from 'actionTypes'
import { fetchPhones as fetchPhonesApi } from 'api';
import { loadMorePhones as loadMorePhonesApi } from 'api';
import { fetchPhoneById as fetchPhoneByIdApi } from 'api';
import {fetchCategories as fetchCategoriesApi} from 'api';
import { getRenderedPhonesLength } from 'selectors';



//@ загрузить все телефоны
export const fetchPhones = () => async dispatch => {
    dispatch({
        type: FETCH_PHONES_START
    });

    try {
        const phones = await fetchPhonesApi();

        dispatch({
            type: FETCH_PHONES_SUCCESS,
            payload: phones
        })

    } catch (err) {
        dispatch({
            type: FETCH_PHONES_FAILURE,
            payload: err,
            error: true
        });
    }
}

//КАК ВООБЩЕ ДЕЛАЕТСЯ ПЕЙДЖИНГ: НА СЕРВЕР ОТПРАВЛЯЕМ ЗАПРОС НА НУЖНЫЙ URL И ОТПРАВЛЯЕМ КОЛИЧЕСТВО УЖЕ ЗАГРУЖЕННЫХ ТЕЛЕФОНОВ (НАПРИМЕР 20) (ЭТО КОЛИЧЕСТВО ОБЫНО НАЗЫВАЮТ offset) ТОГДЕ СЕРВЕР САМ УЖЕ ЗНАЕТ СКОЛЬКО ЕЩЕ ТЕЛЕФОНОВ ПОДГРУЗИТЬ (НАПРИМЕР ЕЩЕ 20) ...
//@ загрузить еще телефонов (пейджинг)
export const loadMorePhones = () => async (dispatch, getState) => { // !!!! у redux-think - у акшена есть второй аргумент getState - функция которая вернет текущий стейт

    const offset = getRenderedPhonesLength(getState()); //offset - это обычно имя переменной которую юзают при пейджинге (количество уже загруженных телефонов на странице)

    dispatch({
        type: LOAD_MORE_PHONES_START
    });

    try {
        const phones = await loadMorePhonesApi({ offset });

        dispatch({
            type: LOAD_MORE_PHONES_SUCCESS,
            payload: phones
        })

    } catch (err) {
        dispatch({
            type: LOAD_MORE_PHONES_FAILURE,
            payload: err,
            error: true
        });
    }
}

//@ получить телефон по id
export const fetchPhoneById = (id) => async dispatch => {
    dispatch({ type: FETCH_PHONE_BY_ID_START });

    try {
        //получить информацию по телефону
        const phone = await fetchPhoneByIdApi(id);
        dispatch({
            type: FETCH_PHONE_BY_ID_SUCCESS,
            payload: phone
        });
    } catch (err) {
        dispatch({
            type: FETCH_PHONE_BY_ID_FAILURE,
            payload: err,
            error: true
        })
    }
}

//@
export const addPhoneToBasket = (id) => (dispatch) => {
    dispatch({
        type: ADD_PHONE_TO_BASKET,
        payload: id
    })
}

//@
export const searchPhone = (text) => (dispatch) => {
    dispatch({
        type: SEARCH_PHONE,
        payload: text
    })
}

//@
export const fetchCategories = (id) => async dispatch => {
    dispatch({ type: FETCH_CATEGORIES_START });

    try {
        //получить информацию по телефону
        const categories = await fetchCategoriesApi(id);
        dispatch({
            type: FETCH_CATEGORIES_SUCCESS,
            payload: categories
        });
    } catch (err) {
        dispatch({
            type: FETCH_CATEGORIES_FAILURE,
            payload: err,
            error: true
        })
    }
}

export const removePhoneFromBasket = id => dispatch => {
    dispatch({
        type: REMOVE_PHONE_FROM_BASKET,
        payload: id
    })
}